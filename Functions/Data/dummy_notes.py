import google.generativeai as genai
import json
import pandas as pd
import sys
sys.path.append('API/Secrets')
sys.path.append('API/app')
from loaders import Loaders # type: ignore
import KEY # type: ignore
import uuid
from datetime import datetime
import random,time
import random


def create_varied_dataset():
    file_path = 'Functions/Data/Articles.csv'

    # Read the CSV file
    df = pd.read_csv(file_path, encoding='ISO-8859-1')

    df_filtered = df[df["Heading"].notnull() & df["NewsType"].notnull() & df["Article"].notnull() &
                    (df["Heading"] != "") & (df["NewsType"] != "") & (df["Article"] != "")]

    # Create list of dictionaries with Article, Heading, and NewsType
    list_of_dicts = df_filtered[["Article", "Heading", "NewsType"]].to_dict(orient="records")

    for data in list_of_dicts:
        data['Article'] = data["Article"].replace('\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n', '').replace('              ', '')

    return list_of_dicts

genai.configure(api_key=KEY.GEMINI_API_KEY)

def generate_realistic_notes(num_notes=2):
    notes = []
    retry_delay = 1  # Initial delay
    max_retries = 5  # Max retry attempts
    users = []

    for n in range(int(num_notes/5)):
        users.append(str(uuid.uuid4()))
    
    topics = create_varied_dataset(num_notes)
    
    for n in range(num_notes):
        try:
            model = Loaders.config_model(model_name='gemini-1.5-flash')

            title = topics[n]

            time.sleep(4)
            description = model.generate_content(
                f"Generate me a short description of a couple (2-3) of sentences of this title : {title}. Only give the topic as description."
            ).text
            time.sleep(4)

            content = model.generate_content(
                f"Generate me simple content (something like taken notes by a person) for this title : {title} and description : {description}. Only give the topic as content."
            ).text

            note = {
                "title": title,
                "content": content,
                "description": description,
                "is_public": bool(random.getrandbits(1)),
                "share_link": "Generated by Gemini-pro",
                "user_id": random.choice(users),
                "group_ids": [],
                "tag_ids": [str(uuid.uuid4()) for _ in range(random.randint(1, 5))],
                "favorited_by_ids": [str(uuid.uuid4()) for _ in range(random.randint(0, 5))],
                "created_at": datetime.now().isoformat(),
                "updated_at": datetime.now().isoformat(),
                "deleted_at": None
            }

            print(title, description)

            notes.append(note)
            retry_delay = 1

        except Exception as e:
            print(f"Error encountered: {e}. Retrying in {retry_delay} seconds...")
            time.sleep(retry_delay)
            retry_delay = min(retry_delay * 2, 30)

    return notes


# realistic_notes = generate_realistic_notes(500)
# with open("Functions/Data/realistic_notes_3.json", "w") as file:
#     json.dump(realistic_notes, file, indent=4)

# print("Realistic notes generated and saved to 'realistic_notes.json'.")


print(create_varied_dataset()[0])