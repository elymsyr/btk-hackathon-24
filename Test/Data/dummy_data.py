import google.generativeai as genai
import json
import sys
sys.path.append('API/Secrets')
sys.path.append('API/app')
from loaders import Loaders # type: ignore
import KEY # type: ignore
import uuid
from datetime import datetime
import random,time

genai.configure(api_key=KEY.GEMINI_API_KEY)

def generate_realistic_notes(num_notes=2):
    notes = []
    retry_delay = 1  # Initial delay
    max_retries = 5  # Max retry attempts
    
    for _ in range(num_notes):
        try:
            general_topic = random.choice(["technology", "science", "art", "history", "business", "health"])

            model = Loaders.config_model()

            title = model.generate_content(
                f"Generate me a topic of a couple of words on this general topic: {general_topic}. Only give the topic as response."
            ).text
            time.sleep(0.5)

            description = model.generate_content(
                f"Generate me a short description of a couple of sentences of this title : {title}. Only give the topic as description."
            ).text
            time.sleep(0.5)

            content = model.generate_content(
                f"Generate me simple content (something like taken notes by a person) for this title : {title} and description : {description}. Only give the topic as content."
            ).text

            note = {
                "title": title,
                "content": content,
                "description": description,
                "is_public": bool(random.getrandbits(1)),
                "share_link": "Generated by Gemini-pro",
                "user_id": str(uuid.uuid4()),
                "group_ids": [],
                "tag_ids": [str(uuid.uuid4()) for _ in range(random.randint(1, 5))],
                "favorited_by_ids": [str(uuid.uuid4()) for _ in range(random.randint(0, 5))],
                "created_at": datetime.now().isoformat(),
                "updated_at": datetime.now().isoformat(),
                "deleted_at": None
            }

            notes.append(note)
            retry_delay = 1  # Reset retry delay on success

        except Exception as e:
            print(f"Error encountered: {e}. Retrying in {retry_delay} seconds...")
            time.sleep(retry_delay)
            retry_delay = min(retry_delay * 2, 10)  # Exponential backoff up to 30 seconds

    return notes


realistic_notes = generate_realistic_notes(100)
with open("realistic_notes.json", "w") as file:
    json.dump(realistic_notes, file, indent=4)

print("Realistic notes generated and saved to 'realistic_notes.json'.")
